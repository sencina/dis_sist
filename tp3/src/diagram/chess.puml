@startuml

class Piece{
    - colour: Colour
    - origin: Position
    - count: int
  /'- position: Position'/
    - movements: Movement[]
    - name: Name
    + getPosition()
    + getColour()
    + getOrigin()
    + getCount()
    + incrementCount()
    + getName()
}

enum Name{

    KING
    QUEEN
    BISHOP
    TOWER
    KNIGHT
    PAWN
}

class Movement{
    -incrementX: int
    -incrementY: int
    -limitless: bool
    +getIncrementX()
    +getIncrementY()
    +hasLimit()
}

enum Colour{
    BLACK
    WHITE
}

class Rule{
     -pieceMovement: Map Name -> Movement[]
     -winCondition: Piece[]
     +getMap()
     +validateMovement(movement: Movement)
}

class Player{
    -name: String
    -colour: Colour
    -timeInSeconds: int
    -deadPieces: Piece[]
    +movePiece(piece: Piece,position: Position,board: Board)
    +getTime()
    +getDeadPieces()
    +incrementTime(seconds: int)
    +addDeadPiece(piece: Piece)
}

class Position {
    - xCord: int
    - yCord: int
    - piece: Piece
    + getXCord()
    + getYCord()
    + getPiece()
    + updatePiece(piece: Piece)
}

class Game{
-players: Player[]
-rules: Rule
-board: Board
-timeInSeconds: int
+checkWinner()
+getPlayers()
+getTime()
+getBoard()
}

class Board{
    -positions: Position[]
    +checkPosition(position: Position)
    +checkPath(initialPos: Position, finalPos: Position)
    +isEmpty(position: Position)
}

Rule --> Piece
Position o-- Piece /'checkear direccion de pieza'/
Board --> Position
Player --> Colour
Piece --> Colour
Piece --> Name
Game *-- Player
Game *-- Board
Game *-- Rule
Rule --> Name
Rule --> Movement
Player --> Piece

/'
    --|> herencia
    *-- composición
    o-- agregación
    --> asosiación
    ..> dependencia
    <|.. realización/implementación

'/

@enduml