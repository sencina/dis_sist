@startuml

class Piece{
    - colour: Colour
    - origin: Position
    - count: int
  /'- position: Position'/
    - movements: Movement[]
    + getPosition()
    + getColour()
    + getOrigin()
    + getCount()
    + incrementCount()
}



class Movement{
    -incrementX: int
    -incrementY: int
    +getIncrementX()
    +getIncrementY()
}

enum Colour{
    BLACK
    WHITE
}

class Rule{
     -pieceMovement: Map Piece -> Movement[]
     +getMap()
}

class Player{
    -name: String
    -colour: Colour
    +move(Piece, Position, Board)
}

class Position {
    - xCord: int
    - yCord: int
    - piece: Piece
    + getXCord()
    + getYCord()
    + getPiece()
    + updatePiece(Piece)
}

class Game{
-players: Player[]
-rules: Rule
-board: Board
+checkWinner()
}

class Board{
    -positions: Position[]
    +checkPosition(Position)
    +isEmpty(Position)
}

Player <-- Game
Rule <-- Game
Board <-- Game
Rule --> Piece
Position o-- Piece /'checkear direccion de pieza'/
Piece-->Position
Position --> Board
Player --> Colour
Piece --> Colour

/'

    --|> herencia
    *-- composición
    o-- agregación
    --> asosiación
    ..> dependencia
    <|.. realización/implementación

'/

@enduml